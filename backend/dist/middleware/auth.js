"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.validatelogin = exports.userImplant = exports.loginCheck = void 0;
var _passport = _interopRequireDefault(require("passport"));
var _jsonwebtoken = _interopRequireDefault(require("jsonwebtoken"));
var _config = _interopRequireDefault(require("../config"));
var JWTSign = function JWTSign(user, date) {
  return _jsonwebtoken["default"].sign({
    // iss : config.app.name,
    sub: user.id,
    iat: date.getTime(),
    exp: new Date().setMinutes(date.getMinutes() + 30)
  }, process.env.JWT_SECRET);
};
var loginCheck = exports.loginCheck = function loginCheck() {
  return function (req, res, next) {
    var token = null;
    if (req && req.cookies) {
      token = req.cookies['XSRF-token'];
    }
    if (token != null) {
      return res.redirect('/');
    }
    next();
  };
};
var validatelogin = exports.validatelogin = function validatelogin(req, res, next) {
  _passport["default"].authenticate('jwt', {
    session: false
  }, function (err, user, info) {
    var contype = req.headers['content-type'];
    var json = !(!contype || contype.indexOf('application/json') !== 0);
    if (err && err == 'expired') {
      next();
      return;
    }
    if (err && err == 'invalid') {
      next();
      return;
    }
    if (err && err == 'user') {
      next();
      return;
    }
    if (err && Object.keys(err).length) {
      next();
      return;
    }
    if (err) {
      next();
      return;
    }
    if (!user) {
      next();
      return;
    }

    //Update Token
    var date = new Date();
    var token = JWTSign(user, date);
    res.cookie('XSRF-token', token, {
      expire: new Date().setMinutes(date.getMinutes() + 30),
      httpOnly: true,
      secure: true
    });
    req.user = user;
    next();
  })(req, res, next);
};
var userImplant = exports.userImplant = function userImplant(req, res, next) {
  res.locals.user = req.user;
  next();
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcGFzc3BvcnQiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9qc29ud2VidG9rZW4iLCJfY29uZmlnIiwiSldUU2lnbiIsInVzZXIiLCJkYXRlIiwiSldUIiwic2lnbiIsInN1YiIsImlkIiwiaWF0IiwiZ2V0VGltZSIsImV4cCIsIkRhdGUiLCJzZXRNaW51dGVzIiwiZ2V0TWludXRlcyIsInByb2Nlc3MiLCJlbnYiLCJKV1RfU0VDUkVUIiwibG9naW5DaGVjayIsImV4cG9ydHMiLCJyZXEiLCJyZXMiLCJuZXh0IiwidG9rZW4iLCJjb29raWVzIiwicmVkaXJlY3QiLCJ2YWxpZGF0ZWxvZ2luIiwicGFzc3BvcnQiLCJhdXRoZW50aWNhdGUiLCJzZXNzaW9uIiwiZXJyIiwiaW5mbyIsImNvbnR5cGUiLCJoZWFkZXJzIiwianNvbiIsImluZGV4T2YiLCJPYmplY3QiLCJrZXlzIiwibGVuZ3RoIiwiY29va2llIiwiZXhwaXJlIiwiaHR0cE9ubHkiLCJzZWN1cmUiLCJ1c2VySW1wbGFudCIsImxvY2FscyJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9taWRkbGV3YXJlL2F1dGguanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHBhc3Nwb3J0IGZyb20gJ3Bhc3Nwb3J0JztcclxuaW1wb3J0IEpXVCBmcm9tICdqc29ud2VidG9rZW4nO1xyXG5pbXBvcnQgY29uZmlnIGZyb20gJy4uL2NvbmZpZyc7XHJcblxyXG5jb25zdCBKV1RTaWduID0gZnVuY3Rpb24odXNlciwgZGF0ZSl7XHJcbiAgICByZXR1cm4gSldULnNpZ24oe1xyXG4gICAgICAgIC8vIGlzcyA6IGNvbmZpZy5hcHAubmFtZSxcclxuICAgICAgICBzdWIgOiB1c2VyLmlkLFxyXG4gICAgICAgIGlhdCA6IGRhdGUuZ2V0VGltZSgpLFxyXG4gICAgICAgIGV4cCA6IG5ldyBEYXRlKCkuc2V0TWludXRlcyhkYXRlLmdldE1pbnV0ZXMoKSArIDMwKVxyXG4gICAgfSwgcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCk7XHJcbn1cclxuZXhwb3J0IGNvbnN0IGxvZ2luQ2hlY2sgPSAoKSA9PiB7XHJcbiAgICByZXR1cm4gKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgICAgICAgdmFyIHRva2VuID0gbnVsbDsgICBcclxuICAgICAgICBpZiAocmVxICYmIHJlcS5jb29raWVzKXtcclxuICAgICAgICAgICAgdG9rZW4gPSByZXEuY29va2llc1snWFNSRi10b2tlbiddO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZih0b2tlbiAhPSBudWxsKXtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcy5yZWRpcmVjdCgnLycpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBuZXh0KCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNvbnN0IHZhbGlkYXRlbG9naW4gPSAocmVxLCByZXMsIG5leHQpID0+IHtcclxuICAgIHBhc3Nwb3J0LmF1dGhlbnRpY2F0ZSgnand0Jywge3Nlc3Npb246IGZhbHNlfSwgKGVyciwgdXNlciwgaW5mbykgPT4ge1xyXG4gICAgICAgIGxldCBjb250eXBlID0gcmVxLmhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddO1xyXG4gICAgICAgIHZhciBqc29uID0gISghY29udHlwZSB8fCBjb250eXBlLmluZGV4T2YoJ2FwcGxpY2F0aW9uL2pzb24nKSAhPT0gMCk7XHJcbiAgICAgICAgaWYgKGVyciAmJiBlcnIgPT0gJ2V4cGlyZWQnKXsgbmV4dCgpO3JldHVybiA7IH1cclxuICAgICAgICBpZiAoZXJyICYmIGVyciA9PSAnaW52YWxpZCcpeyBuZXh0KCk7cmV0dXJuIDsgfVxyXG4gICAgICAgIGlmIChlcnIgJiYgZXJyID09ICd1c2VyJyl7IG5leHQoKTtyZXR1cm4gO31cclxuICAgICAgICBpZiAoZXJyICYmIE9iamVjdC5rZXlzKGVycikubGVuZ3RoKSB7IG5leHQoKTtyZXR1cm4gO31cclxuICAgICAgICBpZiAoZXJyKSB7IG5leHQoKTtyZXR1cm4gO31cclxuICAgICAgICBpZiAoIXVzZXIpIHsgbmV4dCgpO3JldHVybiA7fVxyXG4gICAgICAgIFxyXG4gICAgICAgIC8vVXBkYXRlIFRva2VuXHJcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIHZhciB0b2tlbiA9IEpXVFNpZ24odXNlciwgZGF0ZSk7XHJcbiAgICAgICAgcmVzLmNvb2tpZSgnWFNSRi10b2tlbicsIHRva2VuLCB7XHJcbiAgICAgICAgICAgIGV4cGlyZTogbmV3IERhdGUoKS5zZXRNaW51dGVzKGRhdGUuZ2V0TWludXRlcygpICsgMzApLFxyXG4gICAgICAgICAgICBodHRwT25seTogdHJ1ZSwgc2VjdXJlOiB0cnVlXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHJlcS51c2VyID0gdXNlcjtcclxuICAgICAgICBuZXh0KCk7XHJcbiAgICB9KShyZXEsIHJlcywgbmV4dCk7XHJcbn07XHJcblxyXG5leHBvcnQgdmFyIHVzZXJJbXBsYW50ID0gKHJlcSwgcmVzLCBuZXh0KSA9PiB7XHJcbiAgICByZXMubG9jYWxzLnVzZXIgPSByZXEudXNlcjtcclxuICAgIG5leHQoKTtcclxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLFNBQUEsR0FBQUMsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFDLGFBQUEsR0FBQUYsc0JBQUEsQ0FBQUMsT0FBQTtBQUNBLElBQUFFLE9BQUEsR0FBQUgsc0JBQUEsQ0FBQUMsT0FBQTtBQUVBLElBQU1HLE9BQU8sR0FBRyxTQUFWQSxPQUFPQSxDQUFZQyxJQUFJLEVBQUVDLElBQUksRUFBQztFQUNoQyxPQUFPQyx3QkFBRyxDQUFDQyxJQUFJLENBQUM7SUFDWjtJQUNBQyxHQUFHLEVBQUdKLElBQUksQ0FBQ0ssRUFBRTtJQUNiQyxHQUFHLEVBQUdMLElBQUksQ0FBQ00sT0FBTyxDQUFDLENBQUM7SUFDcEJDLEdBQUcsRUFBRyxJQUFJQyxJQUFJLENBQUMsQ0FBQyxDQUFDQyxVQUFVLENBQUNULElBQUksQ0FBQ1UsVUFBVSxDQUFDLENB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