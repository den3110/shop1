"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
var _typeof = require("@babel/runtime/helpers/typeof");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _mailer = _interopRequireDefault(require("../../../mailer"));
var _models = require("../../../models");
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
var Sequelize = require("sequelize");
var _default = exports["default"] = {
  index: function index(req, res) {
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
      var _req$body, customerId, paymentmethod, orderId, deliveryAddress, product, grandTotal, voucherId, deliveryCharge, reason;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            _context.prev = 0;
            _req$body = req.body, customerId = _req$body.customerId, paymentmethod = _req$body.paymentmethod, orderId = _req$body.orderId, deliveryAddress = _req$body.deliveryAddress, product = _req$body.product, grandTotal = _req$body.grandTotal, voucherId = _req$body.voucherId, deliveryCharge = _req$body.deliveryCharge, reason = _req$body.reason;
            console.log(voucherId);
            _models.db.customer.findOne({
              where: {
                id: customerId
              }
            }).then(function (p) {
              if (p) {
                return _models.db.Order.create({
                  custId: customerId,
                  number: orderId,
                  grandtotal: grandTotal,
                  paymentmethod: paymentmethod,
                  voucherId: voucherId || 0,
                  deliveryFee: deliveryCharge,
                  reason: reason || ""
                });
              }
              return res.status(500).json({
                'errors': ['User is not found']
              });
            }).then(function (order) {
              if (order) {
                return _models.db.Address.create({
                  orderId: order.id,
                  custId: customerId,
                  fullname: deliveryAddress ? deliveryAddress.name : '',
                  phone: deliveryAddress ? deliveryAddress.phone : '',
                  discrict: deliveryAddress ? deliveryAddress.discrict : '',
                  city: deliveryAddress ? deliveryAddress.city : '',
                  states: deliveryAddress ? deliveryAddress.states : '',
                  shipping: deliveryAddress ? deliveryAddress.address : ''
                }).then(function (p) {
                  return [order, p];
                });
              }
            }).then(function (_ref) {
              var _ref2 = (0, _slicedToArray2["default"])(_ref, 2),
                order = _ref2[0],
                p = _ref2[1];
              if (order) {
                var cartEntries = [];
                for (var i = 0; i < product.length; i++) {
                  cartEntries.push({
                    orderId: order.id,
                    addressId: p.id,
                    productId: product[i].id,
                    name: product[i].name,
                    qty: product[i].qty,
                    price: product[i].price,
                    total: product[i].total,
                    photo: product[i].photo,
                    discount: product[i].discountPer
                  });
                }
                return _models.db.Cart.bulkCreate(cartEntries).then(function (r) {
                  return [r];
                });
              }
            }).then(function (success) {
              _mailer["default"].sendUserOrder((deliveryAddress === null || deliveryAddress === void 0 ? void 0 : deliveryAddress.email) || "", "You have ordered successfully, ordered at " + new Date());
              res.status(200).json({
                'success': true
              });
            })["catch"](function (err) {
              _mailer["default"].sendUserOrder((deliveryAddress === null || deliveryAddress === void 0 ? void 0 : deliveryAddress.email) || "", "You have ordered failed, ordered at " + new Date());
              console.log(err);
              res.status(500).json({
                'errors': ['Error adding cart']
              });
            });
            _context.next = 9;
            break;
          case 6:
            _context.prev = 6;
            _context.t0 = _context["catch"](0);
            throw new RequestError('Error');
          case 9:
          case "end":
            return _context.stop();
        }
      }, _callee, null, [[0, 6]]);
    }))();
  },
  getAllOrderList: function getAllOrderList(req, res, next) {
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
      var limit, sort, offset, page;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            limit = 10;
            sort = ['createdAt', 'DESC'];
            offset = 0;
            page = 1;
            if (req.query.limit != undefined) {
              limit = parseInt(req.query.limit);
            }
            if (req.query.page != undefined) {
              page = req.query.page;
              if (page < 1) page = 1;
            }
            if (req.query.sort) {
              if (req.query.sort == 'name') {
                sort = ['name'];
              }
            }
            try {
              _models.db.Order.findAll({
                order: [['createdAt', 'DESC']],
                include: [{
                  model: _models.db.Address
                }, {
                  model: _models.db.Cart
                }]
              }).then(function (list) {
                res.status(200).json({
                  'success': true,
                  order: list
                });
              })["catch"](function (err) {
                next(err);
              });
            } catch (err) {
              res.status(500).json({
                'errors': "" + err
              });
            }
          case 8:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }))();
  },
  statusUpdate: function statusUpdate(req, res, next) {
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
      var _req$body2, id, status, deliverydate;
      return _regeneratorRuntime().wrap(function _callee3$(_context3) {
        while (1) switch (_context3.prev = _context3.next) {
          case 0:
            try {
              _req$body2 = req.body, id = _req$body2.id, status = _req$body2.status, deliverydate = _req$body2.deliverydate;
              _models.db.Order.findOne({
                where: {
                  id: id
                }
              }).then(function (list) {
                var _req$body3, _req$body6, _req$body9, _req$body12;
                if (((_req$body3 = req.body) === null || _req$body3 === void 0 ? void 0 : _req$body3.status) === "delieverd") {
                  var _req$body4, _req$body5;
                  _mailer["default"].sendUserOrder(((_req$body4 = req.body) === null || _req$body4 === void 0 ? void 0 : _req$body4.email) || "", "Your #ORDER-".concat(list.number, " have delivered successfully, delivered at ") + ((_req$body5 = req.body) === null || _req$body5 === void 0 ? void 0 : _req$body5.deliverydate));
                }
                if (((_req$body6 = req.body) === null || _req$body6 === void 0 ? void 0 : _req$body6.status) === "processing") {
                  var _req$body7, _req$body8;
                  _mailer["default"].sendUserOrder(((_req$body7 = req.body) === null || _req$body7 === void 0 ? void 0 : _req$body7.email) || "", "Your #ORDER-".concat(list.number, " is processing, delivered at ") + ((_req$body8 = req.body) === null || _req$body8 === void 0 ? void 0 : _req$body8.deliverydate));
                }
                if (((_req$body9 = req.body) === null || _req$body9 === void 0 ? void 0 : _req$body9.status) === "shipping") {
                  var _req$body10, _req$body11;
                  _mailer["default"].sendUserOrder(((_req$body10 = req.body) === null || _req$body10 === void 0 ? void 0 : _req$body10.email) || "", "Your #ORDER-".concat(list.number, " is shipping, shipping at ") + ((_req$body11 = req.body) === null || _req$body11 === void 0 ? void 0 : _req$body11.deliverydate));
                }
                if (((_req$body12 = req.body) === null || _req$body12 === void 0 ? void 0 : _req$body12.status) === "cancel") {
                  var _req$body13, _req$body14, _req$body15;
                  _mailer["default"].sendUserOrder(((_req$body13 = req.body) === null || _req$body13 === void 0 ? void 0 : _req$body13.email) || "", "Your #ORDER-".concat(list.number, " is canceled, reason: ").concat(((_req$body14 = req.body) === null || _req$body14 === void 0 ? void 0 : _req$body14.reason) || "", ", cancel at ") + ((_req$body15 = req.body) === null || _req$body15 === void 0 ? void 0 : _req$body15.deliverydate));
                }
                return _models.db.Order.update({
                  status: status,
                  deliverydate: deliverydate ? deliverydate : list.deliverydate,
                  reason: req.body.reason || ""
                }, {
                  where: {
                    id: id
                  }
                });
              }).then(function (success) {
                res.status(200).json({
                  'success': true,
                  msg: "Successfully Updated Status"
                });
              })["catch"](function (err) {
                next(err);
              });
            } catch (err) {
              res.status(500).json({
                'errors': "" + err
              });
            }
          case 1:
          case "end":
            return _context3.stop();
        }
      }, _callee3);
    }))();
  },
  getAllOrderListById: function getAllOrderListById(req, res, next) {
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
      return _regeneratorRuntime().wrap(function _callee4$(_context4) {
        while (1) switch (_context4.prev = _context4.next) {
          case 0:
            try {
              _models.db.Order.findAll({
                where: {
                  custId: req.body.id
                },
                order: [['createdAt', 'DESC']],
                include: [{
                  model: _models.db.Address,
                  include: [{
                    model: _models.db.Cart,
                    include: [{
                      model: _models.db.product
                    }]
                  }]
                }]
              }).then(function (list) {
                res.status(200).json({
                  'success': true,
                  order: list
                });
              })["catch"](function (err) {
                next(err);
              });
            } catch (err) {
              res.status(500).json({
                'errors': "" + err
              });
            }
          case 1:
          case "end":
            return _context4.stop();
        }
      }, _callee4);
    }))();
  },
  getAllOrderStatus: function getAllOrderStatus(req, res, next) {
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
      return _regeneratorRuntime().wrap(function _callee5$(_context5) {
        while (1) switch (_context5.prev = _context5.next) {
          case 0:
            try {
              _models.db.Order.findAll({
                where: {
                  status: req.body.status
                },
                order: [['createdAt', 'DESC']],
                include: [{
                  model: _models.db.Address,
                  include: [{
                    model: _models.db.Cart
                  }]
                }]
              }).then(function (list) {
                res.status(200).json({
                  'success': true,
                  order: list
                });
              })["catch"](function (err) {
                next(err);
              });
            } catch (err) {
              res.status(500).json({
                'errors': "" + err
              });
            }
          case 1:
          case "end":
            return _context5.stop();
        }
      }, _callee5);
    }))();
  },
  getAllOrderCount: function getAllOrderCount(req, res, next) {
    return (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {
      return _regeneratorRuntime().wrap(function _callee6$(_context6) {
        while (1) switch (_context6.prev = _context6.next) {
          case 0:
            try {
              _models.db.Order.findAll({
                attributes: ['status', [Sequelize.fn('COUNT', Sequelize.col('status')), 'total']],
                group: ['status']
              }).then(function (list) {
                res.status(200).json({
                  'success': true,
                  data: list
                });
              })["catch"](function (err) {
                next(err);
              });
            } catch (err) {
              res.status(500).json({
                'errors': "" + err
              });
            }
          case 1:
          case "end":
            return _context6.stop();
        }
      }, _callee6);
    }))();
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbWFpbGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfbW9kZWxzIiwiX3JlZ2VuZXJhdG9yUnVudGltZSIsImUiLCJ0IiwiciIsIk9iamVjdCIsInByb3RvdHlwZSIsIm4iLCJoYXNPd25Qcm9wZXJ0eSIsIm8iLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiaSIsIlN5bWJvbCIsImEiLCJpdGVyYXRvciIsImMiLCJhc3luY0l0ZXJhdG9yIiwidSIsInRvU3RyaW5nVGFnIiwiZGVmaW5lIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwid3JhcCIsIkdlbmVyYXRvciIsImNyZWF0ZSIsIkNvbnRleHQiLCJtYWtlSW52b2tlTWV0aG9kIiwidHJ5Q2F0Y2giLCJ0eXBlIiwiYXJnIiwiY2FsbCIsImgiLCJsIiwiZiIsInMiLCJ5IiwiR2VuZXJhdG9yRnVuY3Rpb24iLCJHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSIsInAiLCJkIiwiZ2V0UHJvdG90eXBlT2YiLCJ2IiwidmFsdWVzIiwiZyIsImRlZmluZUl0ZXJhdG9yTWV0aG9kcyIsImZvckVhY2giLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsImludm9rZSIsIl90eXBlb2YiLCJyZXNvbHZlIiwiX19hd2FpdCIsInRoZW4iLCJjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZyIsIkVycm9yIiwiZG9uZSIsIm1ldGhvZCIsImRlbGVnYXRlIiwibWF5YmVJbnZva2VEZWxlZ2F0ZSIsInNlbnQiLCJfc2VudCIsImRpc3BhdGNoRXhjZXB0aW9uIiwiYWJydXB0IiwiVHlwZUVycm9yIiwicmVzdWx0TmFtZSIsIm5leHQiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicHVzaCIsInJlc2V0VHJ5RW50cnkiLCJjb21wbGV0aW9uIiwicmVzZXQiLCJpc05hTiIsImxlbmd0aCIsImRpc3BsYXlOYW1lIiwiaXNHZW5lcmF0b3JGdW5jdGlvbiIsImNvbnN0cnVjdG9yIiwibmFtZSIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsImF3cmFwIiwiYXN5bmMiLCJQcm9taXNlIiwia2V5cyIsInJldmVyc2UiLCJwb3AiLCJwcmV2IiwiY2hhckF0Iiwic2xpY2UiLCJzdG9wIiwicnZhbCIsImhhbmRsZSIsImNvbXBsZXRlIiwiZmluaXNoIiwiX2NhdGNoIiwiZGVsZWdhdGVZaWVsZCIsIlNlcXVlbGl6ZSIsIl9kZWZhdWx0IiwiZXhwb3J0cyIsImluZGV4IiwicmVxIiwicmVzIiwiX2FzeW5jVG9HZW5lcmF0b3IyIiwiX2NhbGxlZSIsIl9yZXEkYm9keSIsImN1c3RvbWVySWQiLCJwYXltZW50bWV0aG9kIiwib3JkZXJJZCIsImRlbGl2ZXJ5QWRkcmVzcyIsInByb2R1Y3QiLCJncmFuZFRvdGFsIiwidm91Y2hlcklkIiwiZGVsaXZlcnlDaGFyZ2UiLCJyZWFzb24iLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwiYm9keSIsImNvbnNvbGUiLCJsb2ciLCJkYiIsImN1c3RvbWVyIiwiZmluZE9uZSIsIndoZXJlIiwiaWQiLCJPcmRlciIsImN1c3RJZCIsIm51bWJlciIsImdyYW5kdG90YWwiLCJkZWxpdmVyeUZlZSIsInN0YXR1cyIsImpzb24iLCJvcmRlciIsIkFkZHJlc3MiLCJmdWxsbmFtZSIsInBob25lIiwiZGlzY3JpY3QiLCJjaXR5Iiwic3RhdGVzIiwic2hpcHBpbmciLCJhZGRyZXNzIiwiX3JlZiIsIl9yZWYyIiwiX3NsaWNlZFRvQXJyYXkyIiwiY2FydEVudHJpZXMiLCJhZGRyZXNzSWQiLCJwcm9kdWN0SWQiLCJxdHkiLCJwcmljZSIsInRvdGFsIiwicGhvdG8iLCJkaXNjb3VudCIsImRpc2NvdW50UGVyIiwiQ2FydCIsImJ1bGtDcmVhdGUiLCJzdWNjZXNzIiwibWFpbGVyIiwic2VuZFVzZXJPcmRlciIsImVtYWlsIiwiRGF0ZSIsImVyciIsInQwIiwiUmVxdWVzdEVycm9yIiwiZ2V0QWxsT3JkZXJMaXN0IiwiX2NhbGxlZTIiLCJsaW1pdCIsInNvcnQiLCJvZmZzZXQiLCJwYWdlIiwiX2NhbGxlZTIkIiwiX2NvbnRleHQyIiwicXVlcnkiLCJ1bmRlZmluZWQiLCJwYXJzZUludCIsImZpbmRBbGwiLCJpbmNsdWRlIiwibW9kZWwiLCJsaXN0Iiwic3RhdHVzVXBkYXRlIiwiX2NhbGxlZTMiLCJfcmVxJGJvZHkyIiwiZGVsaXZlcnlkYXRlIiwiX2NhbGxlZTMkIiwiX2NvbnRleHQzIiwiX3JlcSRib2R5MyIsIl9yZXEkYm9keTYiLCJfcmVxJGJvZHk5IiwiX3JlcSRib2R5MTIiLCJfcmVxJGJvZHk0IiwiX3JlcSRib2R5NSIsImNvbmNhdCIsIl9yZXEkYm9keTciLCJfcmVxJGJvZHk4IiwiX3JlcSRib2R5MTAiLCJfcmVxJGJvZHkxMSIsIl9yZXEkYm9keTEzIiwiX3JlcSRib2R5MTQiLCJfcmVxJGJvZHkxNSIsInVwZGF0ZSIsIm1zZyIsImdldEFsbE9yZGVyTGlzdEJ5SWQiLCJfY2FsbGVlNCIsIl9jYWxsZWU0JCIsIl9jb250ZXh0NCIsImdldEFsbE9yZGVyU3RhdHVzIiwiX2NhbGxlZTUiLCJfY2FsbGVlNSQiLCJfY29udGV4dDUiLCJnZXRBbGxPcmRlckNvdW50IiwiX2NhbGxlZTYiLCJfY2FsbGVlNiQiLCJfY29udGV4dDYiLCJhdHRyaWJ1dGVzIiwiZm4iLCJjb2wiLCJncm91cCIsImRhdGEiXSwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9zcmMvYXBpL3Jlc291cmNlcy9vcmRlci9vcmRlci5jb250cm9sbGVyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtYWlsZXIgZnJvbSAnLi4vLi4vLi4vbWFpbGVyJztcclxuaW1wb3J0IHsgZGIgfSBmcm9tICcuLi8uLi8uLi9tb2RlbHMnO1xyXG52YXIgU2VxdWVsaXplID0gcmVxdWlyZShcInNlcXVlbGl6ZVwiKTtcclxuZXhwb3J0IGRlZmF1bHQge1xyXG5cclxuICAgIGFzeW5jIGluZGV4KHJlcSwgcmVzKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgeyBjdXN0b21lcklkLCBwYXltZW50bWV0aG9kLCBvcmRlcklkLCBkZWxpdmVyeUFkZHJlc3MsIHByb2R1Y3QsIGdyYW5kVG90YWwsIHZvdWNoZXJJZCwgZGVsaXZlcnlDaGFyZ2UsIHJlYXNvbiB9ID0gcmVxLmJvZHk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKHZvdWNoZXJJZClcclxuICAgICAgICAgICAgZGIuY3VzdG9tZXIuZmluZE9uZSh7IHdoZXJlOiB7IGlkOiBjdXN0b21lcklkIH0gfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKHAgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkYi5PcmRlci5jcmVhdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdElkOiBjdXN0b21lcklkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVtYmVyOiBvcmRlcklkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JhbmR0b3RhbDogZ3JhbmRUb3RhbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBheW1lbnRtZXRob2Q6IHBheW1lbnRtZXRob2QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b3VjaGVySWQ6IHZvdWNoZXJJZCB8fCAwLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGl2ZXJ5RmVlOiBkZWxpdmVyeUNoYXJnZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlYXNvbjogcmVhc29uIHx8IFwiXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgJ2Vycm9ycyc6IFsnVXNlciBpcyBub3QgZm91bmQnXSB9KTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbigob3JkZXIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3JkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRiLkFkZHJlc3MuY3JlYXRlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9yZGVySWQ6IG9yZGVyLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VzdElkOiBjdXN0b21lcklkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVsbG5hbWU6IGRlbGl2ZXJ5QWRkcmVzcz9kZWxpdmVyeUFkZHJlc3MubmFtZTonJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob25lOiBkZWxpdmVyeUFkZHJlc3M/ZGVsaXZlcnlBZGRyZXNzLnBob25lOicnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzY3JpY3Q6IGRlbGl2ZXJ5QWRkcmVzcz9kZWxpdmVyeUFkZHJlc3MuZGlzY3JpY3Q6JycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaXR5OiBkZWxpdmVyeUFkZHJlc3M/ZGVsaXZlcnlBZGRyZXNzLmNpdHk6JycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZXM6IGRlbGl2ZXJ5QWRkcmVzcz9kZWxpdmVyeUFkZHJlc3Muc3RhdGVzOicnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hpcHBpbmc6IGRlbGl2ZXJ5QWRkcmVzcz9kZWxpdmVyeUFkZHJlc3MuYWRkcmVzczonJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkudGhlbigocCkgPT4gW29yZGVyLCBwXSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKFtvcmRlciwgcF0pID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3JkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGNhcnRFbnRyaWVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvZHVjdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FydEVudHJpZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJJZDogb3JkZXIuaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkcmVzc0lkOiBwLmlkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb2R1Y3RJZDogcHJvZHVjdFtpXS5pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBwcm9kdWN0W2ldLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXR5OiBwcm9kdWN0W2ldLnF0eSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcmljZTogcHJvZHVjdFtpXS5wcmljZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b3RhbDogcHJvZHVjdFtpXS50b3RhbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaG90bzogcHJvZHVjdFtpXS5waG90byxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNjb3VudDogcHJvZHVjdFtpXS5kaXNjb3VudFBlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGIuQ2FydC5idWxrQ3JlYXRlKGNhcnRFbnRyaWVzKS50aGVuKChyKSA9PiBbcl0pXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKChzdWNjZXNzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFpbGVyLnNlbmRVc2VyT3JkZXIoZGVsaXZlcnlBZGRyZXNzPy5lbWFpbCB8fFwiXCIsIFwiWW91IGhhdmUgb3JkZXJlZCBzdWNjZXNzZnVsbHksIG9yZGVyZWQgYXQgXCIrIG5ldyBEYXRlKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oeyAnc3VjY2Vzcyc6IHRydWUgfSk7XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICAgICAgICAgICAgICBtYWlsZXIuc2VuZFVzZXJPcmRlcihkZWxpdmVyeUFkZHJlc3M/LmVtYWlsIHx8XCJcIiwgXCJZb3UgaGF2ZSBvcmRlcmVkIGZhaWxlZCwgb3JkZXJlZCBhdCBcIisgbmV3IERhdGUoKSlcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhlcnIpOyAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKHsgJ2Vycm9ycyc6IFsnRXJyb3IgYWRkaW5nIGNhcnQnXSB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjYXRjaCAoZXJyKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBSZXF1ZXN0RXJyb3IoJ0Vycm9yJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuXHJcbiAgICBhc3luYyBnZXRBbGxPcmRlckxpc3QocmVxLCByZXMsIG5leHQpIHtcclxuICAgICAgICBsZXQgbGltaXQgPSAxMDtcclxuICAgICAgICBsZXQgc29ydCA9IFsnY3JlYXRlZEF0JywgJ0RFU0MnXTtcclxuICAgICAgICBsZXQgb2Zmc2V0ID0gMDtcclxuICAgICAgICBsZXQgcGFnZSA9IDE7XHJcbiAgICAgICAgaWYocmVxLnF1ZXJ5LmxpbWl0ICE9IHVuZGVmaW5lZCl7XHJcbiAgICAgICAgICAgIGxpbWl0ID0gcGFyc2VJbnQocmVxLnF1ZXJ5LmxpbWl0KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYocmVxLnF1ZXJ5LnBhZ2UgIT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgcGFnZSA9IHJlcS5xdWVyeS5wYWdlO1xyXG4gICAgICAgICAgICBpZihwYWdlIDwgMSlcclxuICAgICAgICAgICAgICAgIHBhZ2UgPSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZihyZXEucXVlcnkuc29ydCl7XHJcbiAgICAgICAgICAgIGlmKHJlcS5xdWVyeS5zb3J0ID09ICduYW1lJyl7XHJcbiAgICAgICAgICAgICAgICBzb3J0ID0gWyduYW1lJ107XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGRiLk9yZGVyLmZpbmRBbGwoe1xyXG4gICAgICAgICAgICAgICAgb3JkZXI6IFtbJ2NyZWF0ZWRBdCcsICdERVNDJ11dLFxyXG4gICAgICAgICAgICAgICAgaW5jbHVkZTogW3sgbW9kZWw6IGRiLkFkZHJlc3MgfSwgeyBtb2RlbDogZGIuQ2FydCB9XSxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKGxpc3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgJ3N1Y2Nlc3MnOiB0cnVlLCBvcmRlcjogbGlzdCB9KTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQoZXJyKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyAnZXJyb3JzJzogXCJcIiArIGVyciB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGFzeW5jIHN0YXR1c1VwZGF0ZShyZXEsIHJlcywgbmV4dCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgaWQsIHN0YXR1cywgZGVsaXZlcnlkYXRlIH0gPSByZXEuYm9keTtcclxuICAgICAgICAgICAgZGIuT3JkZXIuZmluZE9uZSh7IHdoZXJlOiB7IGlkOiBpZCB9IH0pXHJcbiAgICAgICAgICAgICAgICAudGhlbihsaXN0ID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZihyZXEuYm9keT8uc3RhdHVzPT09IFwiZGVsaWV2ZXJkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbGVyLnNlbmRVc2VyT3JkZXIocmVxLmJvZHk/LmVtYWlsIHx8XCJcIiwgYFlvdXIgI09SREVSLSR7bGlzdC5udW1iZXJ9IGhhdmUgZGVsaXZlcmVkIHN1Y2Nlc3NmdWxseSwgZGVsaXZlcmVkIGF0IGArIHJlcS5ib2R5Py5kZWxpdmVyeWRhdGUpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHJlcS5ib2R5Py5zdGF0dXM9PT0gXCJwcm9jZXNzaW5nXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFpbGVyLnNlbmRVc2VyT3JkZXIocmVxLmJvZHk/LmVtYWlsIHx8XCJcIiwgYFlvdXIgI09SREVSLSR7bGlzdC5udW1iZXJ9IGlzIHByb2Nlc3NpbmcsIGRlbGl2ZXJlZCBhdCBgKyByZXEuYm9keT8uZGVsaXZlcnlkYXRlKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZihyZXEuYm9keT8uc3RhdHVzPT09IFwic2hpcHBpbmdcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWlsZXIuc2VuZFVzZXJPcmRlcihyZXEuYm9keT8uZW1haWwgfHxcIlwiLCBgWW91ciAjT1JERVItJHtsaXN0Lm51bWJlcn0gaXMgc2hpcHBpbmcsIHNoaXBwaW5nIGF0IGArIHJlcS5ib2R5Py5kZWxpdmVyeWRhdGUpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHJlcS5ib2R5Py5zdGF0dXM9PT0gXCJjYW5jZWxcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYWlsZXIuc2VuZFVzZXJPcmRlcihyZXEuYm9keT8uZW1haWwgfHxcIlwiLCBgWW91ciAjT1JERVItJHtsaXN0Lm51bWJlcn0gaXMgY2FuY2VsZWQsIHJlYXNvbjogJHtyZXEuYm9keT8ucmVhc29uIHx8IFwiXCJ9LCBjYW5jZWwgYXQgYCsgcmVxLmJvZHk/LmRlbGl2ZXJ5ZGF0ZSlcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRiLk9yZGVyLnVwZGF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXR1czogc3RhdHVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxpdmVyeWRhdGU6IGRlbGl2ZXJ5ZGF0ZSA/IGRlbGl2ZXJ5ZGF0ZSA6IGxpc3QuZGVsaXZlcnlkYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWFzb246IHJlcS5ib2R5LnJlYXNvbiB8fCBcIlwiXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgeyB3aGVyZTogeyBpZDogaWQgfSB9KVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKChzdWNjZXNzKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oeyAnc3VjY2Vzcyc6IHRydWUsIG1zZzogXCJTdWNjZXNzZnVsbHkgVXBkYXRlZCBTdGF0dXNcIiB9KTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQoZXJyKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyAnZXJyb3JzJzogXCJcIiArIGVyciB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG5cclxuICAgIGFzeW5jIGdldEFsbE9yZGVyTGlzdEJ5SWQocmVxLCByZXMsIG5leHQpIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBkYi5PcmRlci5maW5kQWxsKHtcclxuICAgICAgICAgICAgICAgIHdoZXJlOiB7IGN1c3RJZDogcmVxLmJvZHkuaWQgfSxcclxuICAgICAgICAgICAgICAgIG9yZGVyOiBbWydjcmVhdGVkQXQnLCAnREVTQyddXSxcclxuICAgICAgICAgICAgICAgIGluY2x1ZGU6IFt7IG1vZGVsOiBkYi5BZGRyZXNzLCBpbmNsdWRlOiBbeyBtb2RlbDogZGIuQ2FydCwgaW5jbHVkZTogW3ttb2RlbDogZGIucHJvZHVjdH1dIH1dIH1dLFxyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4obGlzdCA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLnN0YXR1cygyMDApLmpzb24oeyAnc3VjY2Vzcyc6IHRydWUsIG9yZGVyOiBsaXN0IH0pO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dChlcnIpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7ICdlcnJvcnMnOiBcIlwiICsgZXJyIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBhc3luYyBnZXRBbGxPcmRlclN0YXR1cyhyZXEsIHJlcywgbmV4dCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGRiLk9yZGVyLmZpbmRBbGwoe1xyXG4gICAgICAgICAgICAgICAgd2hlcmU6IHsgc3RhdHVzOiByZXEuYm9keS5zdGF0dXMgfSxcclxuICAgICAgICAgICAgICAgIG9yZGVyOiBbWydjcmVhdGVkQXQnLCAnREVTQyddXSxcclxuICAgICAgICAgICAgICAgIGluY2x1ZGU6IFt7IG1vZGVsOiBkYi5BZGRyZXNzLCBpbmNsdWRlOiBbeyBtb2RlbDogZGIuQ2FydCB9XSB9XSxcclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKGxpc3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgJ3N1Y2Nlc3MnOiB0cnVlLCBvcmRlcjogbGlzdCB9KTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xyXG4gICAgICAgICAgICAgICAgICAgIG5leHQoZXJyKVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oeyAnZXJyb3JzJzogXCJcIiArIGVyciB9KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgYXN5bmMgZ2V0QWxsT3JkZXJDb3VudChyZXEsIHJlcywgbmV4dCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGRiLk9yZGVyLmZpbmRBbGwoe1xyXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlczogWydzdGF0dXMnLCBbU2VxdWVsaXplLmZuKCdDT1VOVCcsIFNlcXVlbGl6ZS5jb2woJ3N0YXR1cycpKSwgJ3RvdGFsJ11dLFxyXG4gICAgICAgICAgICAgICAgZ3JvdXA6IFsnc3RhdHVzJ11cclxuICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC50aGVuKGxpc3QgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKHsgJ3N1Y2Nlc3MnOiB0cnVlLCBkYXRhOiBsaXN0IH0pO1xyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV4dChlcnIpXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKGVycikge1xyXG4gICAgICAgICAgICByZXMuc3RhdHVzKDUwMCkuanNvbih7ICdlcnJvcnMnOiBcIlwiICsgZXJyIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbn1cclxuXHJcblxyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxJQUFBQSxPQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFDQSxJQUFBQyxPQUFBLEdBQUFELE9BQUE7QUFBcUMsU0FBQUUsb0JBQUEsa0JBQXJDLHFKQUFBQSxtQkFBQSxZQUFBQSxvQkFBQSxXQUFBQyxDQUFBLFNBQUFDLENBQUEsRUFBQUQsQ0FBQSxPQUFBRSxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsU0FBQSxFQUFBQyxDQUFBLEdBQUFILENBQUEsQ0FBQUksY0FBQSxFQUFBQyxDQUFBLEdBQUFKLE1BQUEsQ0FBQUssY0FBQSxjQUFBUCxDQUFBLEVBQUFELENBQUEsRUFBQUUsQ0FBQSxJQUFBRCxDQUFBLENBQUFELENBQUEsSUFBQUUsQ0FBQSxDQUFBTyxLQUFBLEtBQUFDLENBQUEsd0JBQUFDLE1BQUEsR0FBQUEsTUFBQSxPQUFBQyxDQUFBLEdBQUFGLENBQUEsQ0FBQUcsUUFBQSxrQkFBQUMsQ0FBQSxHQUFBSixDQUFBLENBQUFL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